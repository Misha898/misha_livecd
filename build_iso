#!/usr/bin/env bash

# Building tool for my Debian-based live-cd image
# If you ever come up with thought of using it in your mind,
# drop it and refer to live-build(7) man page or to
# https://live-team.pages.debian.net/live-manual/html/live-manual/toc.en.html
# Though it's very simple and you can learn the basics by reading the source

# that's for error-catching mainly
set -eu

BASEDIR=`pwd`

# don't know whether use this variables or not
# i made use of it in order to not retype
# everything when i need compile other version of kernel
LINUX='linux-6.3.8' # adjust your needs 
VERS=${LINUX:6:1} # it gets major number in version

# maybe invoke this func on EXIT using trap?
mytrap() { 
    rm -rf ${BASEDIR}/binary
}

# function for fetching and building kernel
# i don't use this kernel in my .iso yet
handle_kernel() {
    # i use subshell so directory in parent shell won't change (just for fun)
    (
    echo "retrieving and building sources"
    test -d sources || mkdir sources
    cd sources
    test -f linux-6.3.8.tar.xz || \
        wget https://www.kernel.org/pub/linux/kernel/v${VERS}.x/${LINUX}.tar.xz # get tarball
    test -d linux-6.3.8/ || tar -xf ${LINUX}.tar.xz # unpack
    cd ${LINUX}
    make mrproper # remove old configs, binaries and stuff
    make defconfig # configure default config
    make -j`nproc` # compiling using the power of multitasking
    )
}

make_rootfs() {
    echo "making rootfs"
    #this sed removes all comments in config file
    local pack_list=$(sed -e 's/\s*#.*//; /^$/ d' packages_config)
    #download image
    sudo debootstrap --include=dialog,dbus,$pack_list --arch=amd64 stable chroot_dir
    #set up everything in chrooted environment
    sudo chroot chroot_dir/ /bin/bash -c "\
        mount none -t proc /proc; \
        mount none -t sysfs /sys; \
        mount none -t devpts /dev/pts; \
        export HOME=/root; \
        export LC_ALL=C; \
        dbus-uuidgen > /var/lib/dbus/machine-id; \
        apt --yes install linux-image-amd64 live-boot; \
        apt clean; \
        rm /var/lib/dbus/machine-id; \
        rm -rf /tmp/*; \
        umount /proc /sys /dev/pts; \
        exit 0 "        
    
}

make_iso_image() {
    echo "making iso image"
    cd $BASEDIR # just in case
    mkdir -p binary/live && mkdir -p binary/isolinux
    # I'll test self-compiled kernel later maybe
    # it may be not so straitforward as it seems at the first glance
    #cp sources/${LINUX}/arch/x86/boot/bzImage binary/live/vmlinuz

    # copying kernel and ramfs
    cp chroot_dir/boot/vmlinuz-6.1.0-9-amd64 binary/live/vmlinuz
    cp chroot_dir/boot/initrd.img-6.1.0-9-amd64 binary/live/initrd
    # making image
    mksquashfs chroot_dir binary/live/filesystem.squashfs -comp xz -e boot
    # aux files
    cp /usr/lib/ISOLINUX/isolinux.bin binary/isolinux/
    cp /usr/lib/syslinux/modules/bios/* binary/isolinux/
    cp .isolinux.cfg binary/isolinux/isolinux.cfg
    # make .iso file itself
    xorriso -as mkisofs -r -J -joliet-long -l -cache-inodes \
        -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
        -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 \
        -b isolinux/isolinux.bin \
        -boot-info-table -o misha.iso binary

}

main() {
    test -f sources/${LINUX}/arch/x86/boot/bzImage || handle_kernel
    test -d chroot_dir || make_rootfs
    test -f misha.iso || make_iso_image
}
main

#!/usr/bin/env bash

# Building tool for my Debian-based live-cd image
# If you ever come up with thought of using it in your mind,
# drop it and refer to live-build(7) man page or to
# https://live-team.pages.debian.net/live-manual/html/live-manual/toc.en.html
# Though it's very simple and you can learn the basics by reading the source

# Why do you even need documentation? Everything in the source
#                                       (c) Linus Torvalds

# that's for error-catching mainly
set -eu

BASEDIR=`pwd`

# don't know whether use this variables or not
# i made use of it in order to not retype
# everything when i need compile other version of kernel
LINUX='linux-6.3.8' # adjust your needs 
VERS=${LINUX:6:1} # it gets major number in version


# maybe invoke this func on EXIT using trap?
mytrap() { 
    rm -rf ${BASEDIR}/build
}

handle_kernel() {
    # i use subshell so directory in parent shell won't change
    # so much testing because it may fail in any place
    (
    test -d sources || mkdir sources
    cd sources
    test -f linux-6.3.8.tar.xz || \
        wget https://www.kernel.org/pub/linux/kernel/v${VERS}.x/${LINUX}.tar.xz # get tarball
    test -d linux-6.3.8/ || tar -xf ${LINUX}.tar.xz # unpack
    cd ${LINUX}
    make mrproper # remove old configs, binaries and stuff
    make defconfig # configure default config
    make -j`nproc` # compiling using the power of multitasking
    )
}


make_rootfs() {
    echo "making rootfs"
    sudo debootstrap --include=dialog,dbus --arch=amd64 stable chroot_dir

    # there should be a way not to use sudo and
    # don't launch script as root i believe
    sudo chroot chroot_dir/ /bin/bash -c "\
        mount none -t proc /proc; \
        mount none -t sys /sys; \
        mount none -t devpts /dev/pts; \
        export HOME=/root; \
        export LC_ALL=C; \
        dbus-uuidgen > /var/lib/dbus/machine-id; \
        apt --yes --force-yes install linux-image-amd64 live-boot; \
        apt clean; \
        rm /var/lib/dbus/machine-id; \
        rm -rf /tmp/*; \
        umount /proc /sys /dev/pts; \
        exit 0 "        
    
}

# Have you read README?
# The World is built accordingly to C language
#                           (c) Andrew Tanenbaum
# So main() there is
main() {
    # this checking should be more accurate i think
    test -f sources/${LINUX}/arch/x86/boot/bzImage || handle_kernel
    test -d chroot_dir || make_rootfs

}
main
